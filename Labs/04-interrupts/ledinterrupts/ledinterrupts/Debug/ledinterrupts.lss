
ledinterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000035e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  0000035e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000035e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000390  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  000003d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ca5  00000000  00000000  00000448  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006f4  00000000  00000000  000010ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000413  00000000  00000000  000017e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000100  00000000  00000000  00001bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000040b  00000000  00000000  00001cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  000020ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6d 00 	call	0xda	; 0xda <main>
  88:	0c 94 73 01 	jmp	0x2e6	; 0x2e6 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  90:	fc 01       	movw	r30, r24
  92:	40 81       	ld	r20, Z
  94:	21 e0       	ldi	r18, 0x01	; 1
  96:	30 e0       	ldi	r19, 0x00	; 0
  98:	02 c0       	rjmp	.+4      	; 0x9e <GPIO_config_output+0xe>
  9a:	22 0f       	add	r18, r18
  9c:	33 1f       	adc	r19, r19
  9e:	6a 95       	dec	r22
  a0:	e2 f7       	brpl	.-8      	; 0x9a <GPIO_config_output+0xa>
  a2:	24 2b       	or	r18, r20
  a4:	20 83       	st	Z, r18
  a6:	08 95       	ret

000000a8 <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  a8:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  aa:	90 81       	ld	r25, Z
  ac:	21 e0       	ldi	r18, 0x01	; 1
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <GPIO_write_low+0xe>
  b2:	22 0f       	add	r18, r18
  b4:	33 1f       	adc	r19, r19
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <GPIO_write_low+0xa>
  ba:	20 95       	com	r18
  bc:	29 23       	and	r18, r25
  be:	20 83       	st	Z, r18
  c0:	08 95       	ret

000000c2 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  c2:	fc 01       	movw	r30, r24
  c4:	40 81       	ld	r20, Z
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <GPIO_write_high+0xe>
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <GPIO_write_high+0xa>
  d4:	24 2b       	or	r18, r20
  d6:	20 83       	st	Z, r18
  d8:	08 95       	ret

000000da <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  da:	65 e0       	ldi	r22, 0x05	; 5
  dc:	84 e2       	ldi	r24, 0x24	; 36
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
  e4:	65 e0       	ldi	r22, 0x05	; 5
  e6:	85 e2       	ldi	r24, 0x25	; 37
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D2);
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	84 e2       	ldi	r24, 0x24	; 36
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D2);
  f8:	64 e0       	ldi	r22, 0x04	; 4
  fa:	85 e2       	ldi	r24, 0x25	; 37
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D3);
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D3);
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	85 e2       	ldi	r24, 0x25	; 37
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    GPIO_config_output(&DDRB, LED_D4);
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	84 e2       	ldi	r24, 0x24	; 36
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 48 00 	call	0x90	; 0x90 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D4);
 120:	62 e0       	ldi	r22, 0x02	; 2
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    
    TIM1_overflow_262ms();
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	8b 7f       	andi	r24, 0xFB	; 251
 132:	80 83       	st	Z, r24
 134:	80 81       	ld	r24, Z
 136:	83 60       	ori	r24, 0x03	; 3
 138:	80 83       	st	Z, r24
    //TIM1_overflow_1s();
    TIM1_overflow_interrupt_enable();
 13a:	ef e6       	ldi	r30, 0x6F	; 111
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	81 60       	ori	r24, 0x01	; 1
 142:	80 83       	st	Z, r24
        TIM1_overflow_interrupt_enable();
    }*/
  

    // Enables interrupts by setting the global interrupt mask
    sei();
 144:	78 94       	sei
 146:	ff cf       	rjmp	.-2      	; 0x146 <main+0x6c>

00000148 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
    //GPIO_toggle(&PORTB, LED_D1);
    static uint16_t i=0;
    if(i >= 6){
 16a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 172:	86 30       	cpi	r24, 0x06	; 6
 174:	91 05       	cpc	r25, r1
 176:	28 f0       	brcs	.+10     	; 0x182 <__vector_13+0x3a>
        i=0;
 178:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 17c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 180:	02 c0       	rjmp	.+4      	; 0x186 <__vector_13+0x3e>
        }
    if(i == 0) {
 182:	89 2b       	or	r24, r25
 184:	a1 f4       	brne	.+40     	; 0x1ae <__vector_13+0x66>
        GPIO_write_low(&PORTB, LED_D1);
 186:	65 e0       	ldi	r22, 0x05	; 5
 188:	85 e2       	ldi	r24, 0x25	; 37
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D2);
 190:	64 e0       	ldi	r22, 0x04	; 4
 192:	85 e2       	ldi	r24, 0x25	; 37
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D3);
 19a:	63 e0       	ldi	r22, 0x03	; 3
 19c:	85 e2       	ldi	r24, 0x25	; 37
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 1a4:	62 e0       	ldi	r22, 0x02	; 2
 1a6:	85 e2       	ldi	r24, 0x25	; 37
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    }
    if(i == 1) {
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1b2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	a1 f4       	brne	.+40     	; 0x1e2 <__vector_13+0x9a>
        GPIO_write_low(&PORTB, LED_D2);
 1ba:	64 e0       	ldi	r22, 0x04	; 4
 1bc:	85 e2       	ldi	r24, 0x25	; 37
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D1);
 1c4:	65 e0       	ldi	r22, 0x05	; 5
 1c6:	85 e2       	ldi	r24, 0x25	; 37
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D3);
 1ce:	63 e0       	ldi	r22, 0x03	; 3
 1d0:	85 e2       	ldi	r24, 0x25	; 37
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	85 e2       	ldi	r24, 0x25	; 37
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    }
    if(i == 2) {
 1e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1ea:	02 97       	sbiw	r24, 0x02	; 2
 1ec:	a1 f4       	brne	.+40     	; 0x216 <__vector_13+0xce>
        GPIO_write_low(&PORTB, LED_D3);
 1ee:	63 e0       	ldi	r22, 0x03	; 3
 1f0:	85 e2       	ldi	r24, 0x25	; 37
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D1);
 1f8:	65 e0       	ldi	r22, 0x05	; 5
 1fa:	85 e2       	ldi	r24, 0x25	; 37
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D2);
 202:	64 e0       	ldi	r22, 0x04	; 4
 204:	85 e2       	ldi	r24, 0x25	; 37
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 20c:	62 e0       	ldi	r22, 0x02	; 2
 20e:	85 e2       	ldi	r24, 0x25	; 37
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    }
    if(i == 3) {
 216:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 21a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 21e:	03 97       	sbiw	r24, 0x03	; 3
 220:	a1 f4       	brne	.+40     	; 0x24a <__vector_13+0x102>
        GPIO_write_low(&PORTB, LED_D4);
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	85 e2       	ldi	r24, 0x25	; 37
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D1);
 22c:	65 e0       	ldi	r22, 0x05	; 5
 22e:	85 e2       	ldi	r24, 0x25	; 37
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D2);
 236:	64 e0       	ldi	r22, 0x04	; 4
 238:	85 e2       	ldi	r24, 0x25	; 37
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D3);
 240:	63 e0       	ldi	r22, 0x03	; 3
 242:	85 e2       	ldi	r24, 0x25	; 37
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    }
    if(i == 4) {
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 252:	04 97       	sbiw	r24, 0x04	; 4
 254:	a1 f4       	brne	.+40     	; 0x27e <__vector_13+0x136>
        GPIO_write_low(&PORTB, LED_D3);
 256:	63 e0       	ldi	r22, 0x03	; 3
 258:	85 e2       	ldi	r24, 0x25	; 37
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D1);
 260:	65 e0       	ldi	r22, 0x05	; 5
 262:	85 e2       	ldi	r24, 0x25	; 37
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D2);
 26a:	64 e0       	ldi	r22, 0x04	; 4
 26c:	85 e2       	ldi	r24, 0x25	; 37
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 274:	62 e0       	ldi	r22, 0x02	; 2
 276:	85 e2       	ldi	r24, 0x25	; 37
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    }
    if(i == 5) {
 27e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 282:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 286:	05 97       	sbiw	r24, 0x05	; 5
 288:	a1 f4       	brne	.+40     	; 0x2b2 <__vector_13+0x16a>
        GPIO_write_low(&PORTB, LED_D2);
 28a:	64 e0       	ldi	r22, 0x04	; 4
 28c:	85 e2       	ldi	r24, 0x25	; 37
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	0e 94 54 00 	call	0xa8	; 0xa8 <GPIO_write_low>
        GPIO_write_high(&PORTB, LED_D1);
 294:	65 e0       	ldi	r22, 0x05	; 5
 296:	85 e2       	ldi	r24, 0x25	; 37
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D3);
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	85 e2       	ldi	r24, 0x25	; 37
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
        GPIO_write_high(&PORTB, LED_D4);
 2a8:	62 e0       	ldi	r22, 0x02	; 2
 2aa:	85 e2       	ldi	r24, 0x25	; 37
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	0e 94 61 00 	call	0xc2	; 0xc2 <GPIO_write_high>
    }
    i++;
 2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2b6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2ba:	01 96       	adiw	r24, 0x01	; 1
 2bc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 2c0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	bf 91       	pop	r27
 2ca:	af 91       	pop	r26
 2cc:	9f 91       	pop	r25
 2ce:	8f 91       	pop	r24
 2d0:	7f 91       	pop	r23
 2d2:	6f 91       	pop	r22
 2d4:	5f 91       	pop	r21
 2d6:	4f 91       	pop	r20
 2d8:	3f 91       	pop	r19
 2da:	2f 91       	pop	r18
 2dc:	0f 90       	pop	r0
 2de:	0f be       	out	0x3f, r0	; 63
 2e0:	0f 90       	pop	r0
 2e2:	1f 90       	pop	r1
 2e4:	18 95       	reti

000002e6 <_exit>:
 2e6:	f8 94       	cli

000002e8 <__stop_program>:
 2e8:	ff cf       	rjmp	.-2      	; 0x2e8 <__stop_program>
