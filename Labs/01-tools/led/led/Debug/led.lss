
led.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d6  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c5  00000000  00000000  00000b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000330  00000000  00000000  000011df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  00001554  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b0  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 72 00 	call	0xe4	; 0xe4 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <dot>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	2f ef       	ldi	r18, 0xFF	; 255
  82:	83 ec       	ldi	r24, 0xC3	; 195
  84:	99 e0       	ldi	r25, 0x09	; 9
  86:	21 50       	subi	r18, 0x01	; 1
  88:	80 40       	sbci	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	e1 f7       	brne	.-8      	; 0x86 <dot+0x6>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <dot+0x10>
  90:	00 00       	nop
#include <util/delay.h> // Functions for busy-wait delay loops
#include <avr/io.h>     // AVR device-specific IO definitions

void dot() {
	_delay_ms(DOT_DELAY);				//Wait for pause
	PORTB = PORTB | (1<<LED_GREEN);		//Turn on for dot
  92:	85 b1       	in	r24, 0x05	; 5
  94:	80 62       	ori	r24, 0x20	; 32
  96:	85 b9       	out	0x05, r24	; 5
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	83 ec       	ldi	r24, 0xC3	; 195
  9c:	99 e0       	ldi	r25, 0x09	; 9
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <dot+0x1e>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <dot+0x28>
  a8:	00 00       	nop
	_delay_ms(DOT_DELAY);				//Wait for dot
	PORTB = PORTB & ~(1<<LED_GREEN);	//Turn off
  aa:	85 b1       	in	r24, 0x05	; 5
  ac:	8f 7d       	andi	r24, 0xDF	; 223
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	08 95       	ret

000000b2 <dash>:
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	83 ec       	ldi	r24, 0xC3	; 195
  b6:	99 e0       	ldi	r25, 0x09	; 9
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <dash+0x6>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <dash+0x10>
  c2:	00 00       	nop
}

void dash() {
	_delay_ms(DOT_DELAY);				//Wait for pause
	PORTB = PORTB | (1<<LED_GREEN);		//Turn on for dash
  c4:	85 b1       	in	r24, 0x05	; 5
  c6:	80 62       	ori	r24, 0x20	; 32
  c8:	85 b9       	out	0x05, r24	; 5
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	8b e4       	ldi	r24, 0x4B	; 75
  ce:	9d e1       	ldi	r25, 0x1D	; 29
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	80 40       	sbci	r24, 0x00	; 0
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <dash+0x1e>
  d8:	00 c0       	rjmp	.+0      	; 0xda <dash+0x28>
  da:	00 00       	nop
	_delay_ms(DASH_DELAY);				//Wait for dash
	PORTB = PORTB & ~(1<<LED_GREEN);	//Turn off
  dc:	85 b1       	in	r24, 0x05	; 5
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	85 b9       	out	0x05, r24	; 5
  e2:	08 95       	ret

000000e4 <main>:
 **********************************************************************/
int main(void)
{
    // Set pin as output in Data Direction Register
    // DDRB = DDRB or 0010 0000
    DDRB = DDRB | (1<<LED_GREEN);
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	84 b9       	out	0x04, r24	; 4

    // Set pin LOW in Data Register (LED off)
    // PORTB = PORTB and 1101 1111
    PORTB = PORTB & ~(1<<LED_GREEN);
  ea:	85 b1       	in	r24, 0x05	; 5
  ec:	8f 7d       	andi	r24, 0xDF	; 223
  ee:	85 b9       	out	0x05, r24	; 5
		_delay_ms(DOT_DELAY);				//Wait for pause
		PORTB = PORTB ^ (1<<LED_GREEN);     //Turn on for dash
		_delay_ms(DASH_DELAY);				//Wait for dash
		PORTB = PORTB ^ (1<<LED_GREEN);		//Turn of*/
		
		dash();								//D
  f0:	0e 94 59 00 	call	0xb2	; 0xb2 <dash>
		dot();
  f4:	0e 94 40 00 	call	0x80	; 0x80 <dot>
		dot();
  f8:	0e 94 40 00 	call	0x80	; 0x80 <dot>
  fc:	2f ef       	ldi	r18, 0xFF	; 255
  fe:	83 ec       	ldi	r24, 0xC3	; 195
 100:	99 e0       	ldi	r25, 0x09	; 9
 102:	21 50       	subi	r18, 0x01	; 1
 104:	80 40       	sbci	r24, 0x00	; 0
 106:	90 40       	sbci	r25, 0x00	; 0
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x1e>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x28>
 10c:	00 00       	nop
		_delay_ms(DOT_DELAY);				//Pause
		dot();								//E
 10e:	0e 94 40 00 	call	0x80	; 0x80 <dot>
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	83 ec       	ldi	r24, 0xC3	; 195
 116:	99 e0       	ldi	r25, 0x09	; 9
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x34>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x3e>
 122:	00 00       	nop
		_delay_ms(DOT_DELAY);				//Pause
		dot();								//2
 124:	0e 94 40 00 	call	0x80	; 0x80 <dot>
		dot();
 128:	0e 94 40 00 	call	0x80	; 0x80 <dot>
		dash();
 12c:	0e 94 59 00 	call	0xb2	; 0xb2 <dash>
		dot();
 130:	0e 94 40 00 	call	0x80	; 0x80 <dot>
		dot();
 134:	0e 94 40 00 	call	0x80	; 0x80 <dot>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	8b e4       	ldi	r24, 0x4B	; 75
 13c:	9d e1       	ldi	r25, 0x1D	; 29
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x5a>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x64>
 148:	00 00       	nop
 14a:	d2 cf       	rjmp	.-92     	; 0xf0 <main+0xc>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
