
lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800144  00800144  000005de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013cd  00000000  00000000  00000700  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e9  00000000  00000000  00001acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000972  00000000  00000000  000024b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f0  00000000  00000000  00002e28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ef  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a02  00000000  00000000  00003507  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003f09  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__vector_9>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e0       	ldi	r30, 0x06	; 6
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 34       	cpi	r26, 0x44	; 68
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e4       	ldi	r26, 0x44	; 68
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 34       	cpi	r26, 0x4A	; 74
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <main>
  9e:	0c 94 81 02 	jmp	0x502	; 0x502 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
  a6:	29 9a       	sbi	0x05, 1	; 5
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	8a 95       	dec	r24
  ac:	f1 f7       	brne	.-4      	; 0xaa <toggle_e+0x4>
  ae:	00 00       	nop
  b0:	29 98       	cbi	0x05, 1	; 5
  b2:	08 95       	ret

000000b4 <lcd_write>:
  b4:	cf 93       	push	r28
  b6:	c8 2f       	mov	r28, r24
  b8:	66 23       	and	r22, r22
  ba:	11 f0       	breq	.+4      	; 0xc0 <lcd_write+0xc>
  bc:	28 9a       	sbi	0x05, 0	; 5
  be:	01 c0       	rjmp	.+2      	; 0xc2 <lcd_write+0xe>
  c0:	28 98       	cbi	0x05, 0	; 5
  c2:	54 9a       	sbi	0x0a, 4	; 10
  c4:	55 9a       	sbi	0x0a, 5	; 10
  c6:	56 9a       	sbi	0x0a, 6	; 10
  c8:	57 9a       	sbi	0x0a, 7	; 10
  ca:	5f 98       	cbi	0x0b, 7	; 11
  cc:	5e 98       	cbi	0x0b, 6	; 11
  ce:	5d 98       	cbi	0x0b, 5	; 11
  d0:	5c 98       	cbi	0x0b, 4	; 11
  d2:	cc 23       	and	r28, r28
  d4:	0c f4       	brge	.+2      	; 0xd8 <lcd_write+0x24>
  d6:	5f 9a       	sbi	0x0b, 7	; 11
  d8:	c6 fd       	sbrc	r28, 6
  da:	5e 9a       	sbi	0x0b, 6	; 11
  dc:	c5 fd       	sbrc	r28, 5
  de:	5d 9a       	sbi	0x0b, 5	; 11
  e0:	c4 fd       	sbrc	r28, 4
  e2:	5c 9a       	sbi	0x0b, 4	; 11
  e4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
  e8:	5f 98       	cbi	0x0b, 7	; 11
  ea:	5e 98       	cbi	0x0b, 6	; 11
  ec:	5d 98       	cbi	0x0b, 5	; 11
  ee:	5c 98       	cbi	0x0b, 4	; 11
  f0:	c3 fd       	sbrc	r28, 3
  f2:	5f 9a       	sbi	0x0b, 7	; 11
  f4:	c2 fd       	sbrc	r28, 2
  f6:	5e 9a       	sbi	0x0b, 6	; 11
  f8:	c1 fd       	sbrc	r28, 1
  fa:	5d 9a       	sbi	0x0b, 5	; 11
  fc:	c0 fd       	sbrc	r28, 0
  fe:	5c 9a       	sbi	0x0b, 4	; 11
 100:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 104:	5c 9a       	sbi	0x0b, 4	; 11
 106:	5d 9a       	sbi	0x0b, 5	; 11
 108:	5e 9a       	sbi	0x0b, 6	; 11
 10a:	5f 9a       	sbi	0x0b, 7	; 11
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	9b e0       	ldi	r25, 0x0B	; 11
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <lcd_write+0x5c>
 114:	00 c0       	rjmp	.+0      	; 0x116 <lcd_write+0x62>
 116:	00 00       	nop
 118:	cf 91       	pop	r28
 11a:	08 95       	ret

0000011c <lcd_command>:
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 122:	08 95       	ret

00000124 <lcd_data>:
 124:	61 e0       	ldi	r22, 0x01	; 1
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 12a:	08 95       	ret

0000012c <lcd_gotoxy>:
 12c:	61 11       	cpse	r22, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <lcd_gotoxy+0xc>
 130:	80 58       	subi	r24, 0x80	; 128
 132:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 136:	08 95       	ret
 138:	80 54       	subi	r24, 0x40	; 64
 13a:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 13e:	08 95       	ret

00000140 <lcd_clrscr>:
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 146:	08 95       	ret

00000148 <lcd_putc>:
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_write>
 14e:	08 95       	ret

00000150 <lcd_puts>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	fc 01       	movw	r30, r24
 15a:	80 81       	ld	r24, Z
 15c:	88 23       	and	r24, r24
 15e:	29 f0       	breq	.+10     	; 0x16a <lcd_puts+0x1a>
 160:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 164:	89 91       	ld	r24, Y+
 166:	81 11       	cpse	r24, r1
 168:	fb cf       	rjmp	.-10     	; 0x160 <lcd_puts+0x10>
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 170:	cf 93       	push	r28
 172:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 174:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 176:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 178:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 17a:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 17c:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 17e:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 180:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 182:	8f ef       	ldi	r24, 0xFF	; 255
 184:	99 ef       	ldi	r25, 0xF9	; 249
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <lcd_init+0x16>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <lcd_init+0x1c>
 18c:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 18e:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 190:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2a>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x30>
 1a0:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3a>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x40>
 1b0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1b6:	8f ef       	ldi	r24, 0xFF	; 255
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x50>
 1c0:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 1c2:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
 1c4:	0e 94 53 00 	call	0xa6	; 0xa6 <toggle_e>
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <lcd_init+0x5c>
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <lcd_init+0x62>
 1d2:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 1d4:	88 e2       	ldi	r24, 0x28	; 40
 1d6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 1da:	88 e0       	ldi	r24, 0x08	; 8
 1dc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_clrscr();                  /* display clear                */
 1e0:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 1e4:	86 e0       	ldi	r24, 0x06	; 6
 1e6:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
}/* lcd_init */
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <main>:
// Custom character definition using https://omerk.github.io/lcdchargen/

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 b8 00 	call	0x170	; 0x170 <lcd_init>

    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
 1fa:	80 e4       	ldi	r24, 0x40	; 64
 1fc:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
 200:	c0 e0       	ldi	r28, 0x00	; 0
 202:	d1 e0       	ldi	r29, 0x01	; 1
 204:	00 e3       	ldi	r16, 0x30	; 48
 206:	11 e0       	ldi	r17, 0x01	; 1
    for (uint8_t i = 0; i < 48; i++)
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
 208:	89 91       	ld	r24, Y+
 20a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_data>
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);

    // Set pointer to beginning of CGRAM memory
    lcd_command(1 << LCD_CGRAM);
    for (uint8_t i = 0; i < 48; i++)
 20e:	c0 17       	cp	r28, r16
 210:	d1 07       	cpc	r29, r17
 212:	d1 f7       	brne	.-12     	; 0x208 <main+0x14>
    {
        // Store all new chars to memory line by line
        lcd_data(customChar[i]);
    }
    // Set DDRAM address
    lcd_command(1 << LCD_DDRAM);
 214:	80 e8       	ldi	r24, 0x80	; 128
 216:	0e 94 8e 00 	call	0x11c	; 0x11c <lcd_command>
    
    // Display first custom character
    lcd_clrscr();
 21a:	0e 94 a0 00 	call	0x140	; 0x140 <lcd_clrscr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	2f ef       	ldi	r18, 0xFF	; 255
 220:	81 ee       	ldi	r24, 0xE1	; 225
 222:	94 e0       	ldi	r25, 0x04	; 4
 224:	21 50       	subi	r18, 0x01	; 1
 226:	80 40       	sbci	r24, 0x00	; 0
 228:	90 40       	sbci	r25, 0x00	; 0
 22a:	e1 f7       	brne	.-8      	; 0x224 <main+0x30>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <main+0x3a>
 22e:	00 00       	nop
	_delay_ms(100);
    lcd_gotoxy(1, 0);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_puts("00:00.0");
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
    lcd_gotoxy(11, 0);
 240:	60 e0       	ldi	r22, 0x00	; 0
 242:	8b e0       	ldi	r24, 0x0B	; 11
 244:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc('a');
 248:	81 e6       	ldi	r24, 0x61	; 97
 24a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
    lcd_gotoxy(1, 1);
 24e:	61 e0       	ldi	r22, 0x01	; 1
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc('b');
 256:	82 e6       	ldi	r24, 0x62	; 98
 258:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
    lcd_gotoxy(11, 1);
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	8b e0       	ldi	r24, 0x0B	; 11
 260:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
    lcd_putc('c');
 264:	83 e6       	ldi	r24, 0x63	; 99
 266:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 26a:	2f ef       	ldi	r18, 0xFF	; 255
 26c:	84 e3       	ldi	r24, 0x34	; 52
 26e:	9c e0       	ldi	r25, 0x0C	; 12
 270:	21 50       	subi	r18, 0x01	; 1
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	90 40       	sbci	r25, 0x00	; 0
 276:	e1 f7       	brne	.-8      	; 0x270 <main+0x7c>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x86>
 27a:	00 00       	nop
	_delay_ms(250);
	/*lcd_gotoxy(1, 1);
	lcd_putc(' ');*/
	
	TIM2_16m();
 27c:	e1 eb       	ldi	r30, 0xB1	; 177
 27e:	f0 e0       	ldi	r31, 0x00	; 0
 280:	80 81       	ld	r24, Z
 282:	87 60       	ori	r24, 0x07	; 7
 284:	80 83       	st	Z, r24
	TIM2_overflow_interrupt_enable();
 286:	e0 e7       	ldi	r30, 0x70	; 112
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	80 83       	st	Z, r24
	TIM0_overflow_16ms();
 290:	85 b5       	in	r24, 0x25	; 37
 292:	8d 7f       	andi	r24, 0xFD	; 253
 294:	85 bd       	out	0x25, r24	; 37
 296:	85 b5       	in	r24, 0x25	; 37
 298:	85 60       	ori	r24, 0x05	; 5
 29a:	85 bd       	out	0x25, r24	; 37
	TIM0_overflow_interrupt_enable();
 29c:	ee e6       	ldi	r30, 0x6E	; 110
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	81 60       	ori	r24, 0x01	; 1
 2a4:	80 83       	st	Z, r24

	sei();
 2a6:	78 94       	sei
 2a8:	ff cf       	rjmp	.-2      	; 0x2a8 <main+0xb4>

000002aa <__vector_9>:
 * Function: Timer/Counter2 overflow interrupt
 * Purpose:  Update the stopwatch on LCD display every sixth overflow,
 *           ie approximately every 100 ms (6 x 16 ms = 100 ms).
 **********************************************************************/
ISR(TIMER2_OVF_vect)
{
 2aa:	1f 92       	push	r1
 2ac:	0f 92       	push	r0
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	0f 92       	push	r0
 2b2:	11 24       	eor	r1, r1
 2b4:	2f 93       	push	r18
 2b6:	3f 93       	push	r19
 2b8:	4f 93       	push	r20
 2ba:	5f 93       	push	r21
 2bc:	6f 93       	push	r22
 2be:	7f 93       	push	r23
 2c0:	8f 93       	push	r24
 2c2:	9f 93       	push	r25
 2c4:	af 93       	push	r26
 2c6:	bf 93       	push	r27
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	28 97       	sbiw	r28, 0x08	; 8
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	cd bf       	out	0x3d, r28	; 61
    static uint8_t number_of_overflows = 0;
    static uint8_t tens = 0;			// Tenths of a second
    static uint8_t secs = 0;			// Seconds
	static uint8_t mins = 0;			// Minutes
    char lcd_string_secs[2] = "  ";     // String for converting numbers by itoa()
 2da:	80 e2       	ldi	r24, 0x20	; 32
 2dc:	90 e2       	ldi	r25, 0x20	; 32
 2de:	9a 83       	std	Y+2, r25	; 0x02
 2e0:	89 83       	std	Y+1, r24	; 0x01
	char lcd_string_mins[2] = "  ";
 2e2:	9c 83       	std	Y+4, r25	; 0x04
 2e4:	8b 83       	std	Y+3, r24	; 0x03
    char lcd_pwr[4] = "  ";
 2e6:	9e 83       	std	Y+6, r25	; 0x06
 2e8:	8d 83       	std	Y+5, r24	; 0x05
 2ea:	18 86       	std	Y+8, r1	; 0x08
 2ec:	1f 82       	std	Y+7, r1	; 0x07
    uint16_t pwr;
    
    number_of_overflows++;
 2ee:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <number_of_overflows.2078>
 2f2:	8f 5f       	subi	r24, 0xFF	; 255
    if (number_of_overflows >= 6)
 2f4:	86 30       	cpi	r24, 0x06	; 6
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <__vector_9+0x54>
    char lcd_string_secs[2] = "  ";     // String for converting numbers by itoa()
	char lcd_string_mins[2] = "  ";
    char lcd_pwr[4] = "  ";
    uint16_t pwr;
    
    number_of_overflows++;
 2f8:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <number_of_overflows.2078>
 2fc:	6c c0       	rjmp	.+216    	; 0x3d6 <__vector_9+0x12c>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;
 2fe:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <number_of_overflows.2078>

        tens++;
 302:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tens.2079>
 306:	8f 5f       	subi	r24, 0xFF	; 255
        if (tens >= 10) {
 308:	8a 30       	cpi	r24, 0x0A	; 10
 30a:	18 f4       	brcc	.+6      	; 0x312 <__vector_9+0x68>
    if (number_of_overflows >= 6)
    {
        // Do this every 6 x 16 ms = 100 ms
        number_of_overflows = 0;

        tens++;
 30c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <tens.2079>
 310:	29 c0       	rjmp	.+82     	; 0x364 <__vector_9+0xba>
        if (tens >= 10) {
           tens = 0;
 312:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <tens.2079>
           secs++;		   
 316:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <secs.2080>
 31a:	8f 5f       	subi	r24, 0xFF	; 255
           if (secs >= 60) {
 31c:	8c 33       	cpi	r24, 0x3C	; 60
 31e:	18 f4       	brcc	.+6      	; 0x326 <__vector_9+0x7c>
        number_of_overflows = 0;

        tens++;
        if (tens >= 10) {
           tens = 0;
           secs++;		   
 320:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <secs.2080>
 324:	0c c0       	rjmp	.+24     	; 0x33e <__vector_9+0x94>
           if (secs >= 60) {
               secs = 0;
 326:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <secs.2080>
			   mins++; 
 32a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <mins.2081>
 32e:	8f 5f       	subi	r24, 0xFF	; 255
			   if (mins >= 60) {
 330:	8c 33       	cpi	r24, 0x3C	; 60
 332:	18 f4       	brcc	.+6      	; 0x33a <__vector_9+0x90>
        if (tens >= 10) {
           tens = 0;
           secs++;		   
           if (secs >= 60) {
               secs = 0;
			   mins++; 
 334:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <mins.2081>
 338:	02 c0       	rjmp	.+4      	; 0x33e <__vector_9+0x94>
			   if (mins >= 60) {
				   mins = 0;
 33a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <mins.2081>
			   }
           } 
        pwr = secs * secs;          //powering seconds
 33e:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <secs.2080>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	be 01       	movw	r22, r28
 346:	6b 5f       	subi	r22, 0xFB	; 251
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	88 9f       	mul	r24, r24
 34c:	c0 01       	movw	r24, r0
 34e:	11 24       	eor	r1, r1
 350:	0e 94 4c 02 	call	0x498	; 0x498 <__itoa_ncheck>
        itoa(pwr, lcd_pwr, 10);     //number to string
        lcd_gotoxy(11, 0);
 354:	60 e0       	ldi	r22, 0x00	; 0
 356:	8b e0       	ldi	r24, 0x0B	; 11
 358:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
        lcd_puts(lcd_pwr);          //printing power of seconds
 35c:	ce 01       	movw	r24, r28
 35e:	05 96       	adiw	r24, 0x05	; 5
 360:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
        }
        
        lcd_gotoxy(7, 0);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	87 e0       	ldi	r24, 0x07	; 7
 368:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
        lcd_putc(tens + '0');
 36c:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <tens.2079>
 370:	80 5d       	subi	r24, 0xD0	; 208
 372:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
 376:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <secs.2080>
 37a:	4a e0       	ldi	r20, 0x0A	; 10
 37c:	be 01       	movw	r22, r28
 37e:	6f 5f       	subi	r22, 0xFF	; 255
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 4c 02 	call	0x498	; 0x498 <__itoa_ncheck>
        itoa(secs, lcd_string_secs, 10);
        lcd_gotoxy(4, 0);
 388:	60 e0       	ldi	r22, 0x00	; 0
 38a:	84 e0       	ldi	r24, 0x04	; 4
 38c:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
        if (secs < 10) {
 390:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <secs.2080>
 394:	8a 30       	cpi	r24, 0x0A	; 10
 396:	18 f4       	brcc	.+6      	; 0x39e <__vector_9+0xf4>
            lcd_putc('0');
 398:	80 e3       	ldi	r24, 0x30	; 48
 39a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
        }
        lcd_puts(lcd_string_secs);
 39e:	ce 01       	movw	r24, r28
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
 3a6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <mins.2081>
 3aa:	4a e0       	ldi	r20, 0x0A	; 10
 3ac:	be 01       	movw	r22, r28
 3ae:	6d 5f       	subi	r22, 0xFD	; 253
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	0e 94 4c 02 	call	0x498	; 0x498 <__itoa_ncheck>
		
		itoa(mins, lcd_string_mins, 10);
		lcd_gotoxy(1, 0);
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
		if (mins < 10) {
 3c0:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <mins.2081>
 3c4:	8a 30       	cpi	r24, 0x0A	; 10
 3c6:	18 f4       	brcc	.+6      	; 0x3ce <__vector_9+0x124>
			lcd_putc('0');
 3c8:	80 e3       	ldi	r24, 0x30	; 48
 3ca:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
		}
		lcd_puts(lcd_string_mins);
 3ce:	ce 01       	movw	r24, r28
 3d0:	03 96       	adiw	r24, 0x03	; 3
 3d2:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
        
    }
    // Else do nothing and exit the ISR
}
 3d6:	28 96       	adiw	r28, 0x08	; 8
 3d8:	0f b6       	in	r0, 0x3f	; 63
 3da:	f8 94       	cli
 3dc:	de bf       	out	0x3e, r29	; 62
 3de:	0f be       	out	0x3f, r0	; 63
 3e0:	cd bf       	out	0x3d, r28	; 61
 3e2:	df 91       	pop	r29
 3e4:	cf 91       	pop	r28
 3e6:	ff 91       	pop	r31
 3e8:	ef 91       	pop	r30
 3ea:	bf 91       	pop	r27
 3ec:	af 91       	pop	r26
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	7f 91       	pop	r23
 3f4:	6f 91       	pop	r22
 3f6:	5f 91       	pop	r21
 3f8:	4f 91       	pop	r20
 3fa:	3f 91       	pop	r19
 3fc:	2f 91       	pop	r18
 3fe:	0f 90       	pop	r0
 400:	0f be       	out	0x3f, r0	; 63
 402:	0f 90       	pop	r0
 404:	1f 90       	pop	r1
 406:	18 95       	reti

00000408 <__vector_16>:

ISR(TIMER0_OVF_vect)
{	
 408:	1f 92       	push	r1
 40a:	0f 92       	push	r0
 40c:	0f b6       	in	r0, 0x3f	; 63
 40e:	0f 92       	push	r0
 410:	11 24       	eor	r1, r1
 412:	2f 93       	push	r18
 414:	3f 93       	push	r19
 416:	4f 93       	push	r20
 418:	5f 93       	push	r21
 41a:	6f 93       	push	r22
 41c:	7f 93       	push	r23
 41e:	8f 93       	push	r24
 420:	9f 93       	push	r25
 422:	af 93       	push	r26
 424:	bf 93       	push	r27
 426:	ef 93       	push	r30
 428:	ff 93       	push	r31
	static uint8_t tnt = 0;
	static uint8_t col = 0;
	lcd_gotoxy(tnt + 1, 1);
 42a:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <tnt.2091>
 42e:	61 e0       	ldi	r22, 0x01	; 1
 430:	8f 5f       	subi	r24, 0xFF	; 255
 432:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
	lcd_putc(col);
 436:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 43a:	0e 94 a4 00 	call	0x148	; 0x148 <lcd_putc>
	col++;
 43e:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__data_end>
 442:	8f 5f       	subi	r24, 0xFF	; 255
	if(col == 6) {
 444:	86 30       	cpi	r24, 0x06	; 6
 446:	19 f0       	breq	.+6      	; 0x44e <__vector_16+0x46>
{	
	static uint8_t tnt = 0;
	static uint8_t col = 0;
	lcd_gotoxy(tnt + 1, 1);
	lcd_putc(col);
	col++;
 448:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__data_end>
 44c:	14 c0       	rjmp	.+40     	; 0x476 <__vector_16+0x6e>
	if(col == 6) {
		col = 0;
 44e:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <__data_end>
		tnt++;
 452:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <tnt.2091>
 456:	8f 5f       	subi	r24, 0xFF	; 255
		if (tnt == 10) {
 458:	8a 30       	cpi	r24, 0x0A	; 10
 45a:	19 f0       	breq	.+6      	; 0x462 <__vector_16+0x5a>
	lcd_gotoxy(tnt + 1, 1);
	lcd_putc(col);
	col++;
	if(col == 6) {
		col = 0;
		tnt++;
 45c:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <tnt.2091>
 460:	0a c0       	rjmp	.+20     	; 0x476 <__vector_16+0x6e>
		if (tnt == 10) {
			tnt = 0;
 462:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <tnt.2091>
			lcd_gotoxy(1, 1);
 466:	61 e0       	ldi	r22, 0x01	; 1
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_gotoxy>
			lcd_puts("          ");
 46e:	88 e3       	ldi	r24, 0x38	; 56
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 a8 00 	call	0x150	; 0x150 <lcd_puts>
		}
	}

// Else do nothing and exit the ISR
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	bf 91       	pop	r27
 47c:	af 91       	pop	r26
 47e:	9f 91       	pop	r25
 480:	8f 91       	pop	r24
 482:	7f 91       	pop	r23
 484:	6f 91       	pop	r22
 486:	5f 91       	pop	r21
 488:	4f 91       	pop	r20
 48a:	3f 91       	pop	r19
 48c:	2f 91       	pop	r18
 48e:	0f 90       	pop	r0
 490:	0f be       	out	0x3f, r0	; 63
 492:	0f 90       	pop	r0
 494:	1f 90       	pop	r1
 496:	18 95       	reti

00000498 <__itoa_ncheck>:
 498:	bb 27       	eor	r27, r27
 49a:	4a 30       	cpi	r20, 0x0A	; 10
 49c:	31 f4       	brne	.+12     	; 0x4aa <__itoa_ncheck+0x12>
 49e:	99 23       	and	r25, r25
 4a0:	22 f4       	brpl	.+8      	; 0x4aa <__itoa_ncheck+0x12>
 4a2:	bd e2       	ldi	r27, 0x2D	; 45
 4a4:	90 95       	com	r25
 4a6:	81 95       	neg	r24
 4a8:	9f 4f       	sbci	r25, 0xFF	; 255
 4aa:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <__utoa_common>

000004ae <__utoa_ncheck>:
 4ae:	bb 27       	eor	r27, r27

000004b0 <__utoa_common>:
 4b0:	fb 01       	movw	r30, r22
 4b2:	55 27       	eor	r21, r21
 4b4:	aa 27       	eor	r26, r26
 4b6:	88 0f       	add	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	aa 1f       	adc	r26, r26
 4bc:	a4 17       	cp	r26, r20
 4be:	10 f0       	brcs	.+4      	; 0x4c4 <__utoa_common+0x14>
 4c0:	a4 1b       	sub	r26, r20
 4c2:	83 95       	inc	r24
 4c4:	50 51       	subi	r21, 0x10	; 16
 4c6:	b9 f7       	brne	.-18     	; 0x4b6 <__utoa_common+0x6>
 4c8:	a0 5d       	subi	r26, 0xD0	; 208
 4ca:	aa 33       	cpi	r26, 0x3A	; 58
 4cc:	08 f0       	brcs	.+2      	; 0x4d0 <__utoa_common+0x20>
 4ce:	a9 5d       	subi	r26, 0xD9	; 217
 4d0:	a1 93       	st	Z+, r26
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	79 f7       	brne	.-34     	; 0x4b4 <__utoa_common+0x4>
 4d6:	b1 11       	cpse	r27, r1
 4d8:	b1 93       	st	Z+, r27
 4da:	11 92       	st	Z+, r1
 4dc:	cb 01       	movw	r24, r22
 4de:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <strrev>

000004e2 <strrev>:
 4e2:	dc 01       	movw	r26, r24
 4e4:	fc 01       	movw	r30, r24
 4e6:	67 2f       	mov	r22, r23
 4e8:	71 91       	ld	r23, Z+
 4ea:	77 23       	and	r23, r23
 4ec:	e1 f7       	brne	.-8      	; 0x4e6 <strrev+0x4>
 4ee:	32 97       	sbiw	r30, 0x02	; 2
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <strrev+0x18>
 4f2:	7c 91       	ld	r23, X
 4f4:	6d 93       	st	X+, r22
 4f6:	70 83       	st	Z, r23
 4f8:	62 91       	ld	r22, -Z
 4fa:	ae 17       	cp	r26, r30
 4fc:	bf 07       	cpc	r27, r31
 4fe:	c8 f3       	brcs	.-14     	; 0x4f2 <strrev+0x10>
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
