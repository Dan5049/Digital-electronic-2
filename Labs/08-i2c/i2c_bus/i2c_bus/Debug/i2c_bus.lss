
i2c_bus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000052  00800100  000004f8  0000058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800152  00800152  000005de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001199  00000000  00000000  00000710  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000936  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000771  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e8  00000000  00000000  00002950  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a7  00000000  00000000  00002b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000648  00000000  00000000  000030df  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003727  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b0 01 	jmp	0x360	; 0x360 <__vector_18>
  4c:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ef       	ldi	r30, 0xF8	; 248
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 35       	cpi	r26, 0x52	; 82
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e5       	ldi	r26, 0x52	; 82
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 39       	cpi	r26, 0x97	; 151
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 6d 01 	call	0x2da	; 0x2da <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 08 02 	call	0x410	; 0x410 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("\r\nScan I2C-bus for devices:\r\n");
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
 106:	2a 97       	sbiw	r28, 0x0a	; 10
 108:	de bf       	out	0x3e, r29	; 62
 10a:	cd bf       	out	0x3d, r28	; 61
	
	static state_t state = STATE_IDLE;  // Current state of the FSM
	static uint8_t addr = 0x57;  // I2C slave address of DHT12
	uint8_t value;               // Data obtained from the I2C bus
	char uart_string[] = "000";  // String for converting numbers by itoa()
	char humint_string[2] = "00";
 10c:	80 e3       	ldi	r24, 0x30	; 48
 10e:	90 e3       	ldi	r25, 0x30	; 48
 110:	9a 83       	std	Y+2, r25	; 0x02
 112:	89 83       	std	Y+1, r24	; 0x01
	char humfrc_string[2] = "00";
 114:	9c 83       	std	Y+4, r25	; 0x04
 116:	8b 83       	std	Y+3, r24	; 0x03
	char tempint_string[2] = "00";
 118:	9e 83       	std	Y+6, r25	; 0x06
 11a:	8d 83       	std	Y+5, r24	; 0x05
	char temfrc_string[2] = "00";
 11c:	98 87       	std	Y+8, r25	; 0x08
 11e:	8f 83       	std	Y+7, r24	; 0x07
	char checksum_string[2] = "00";
 120:	9a 87       	std	Y+10, r25	; 0x0a
 122:	89 87       	std	Y+9, r24	; 0x09

	// FSM
	switch (state)
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	79 f0       	breq	.+30     	; 0x14a <__vector_13+0x72>
 12c:	18 f4       	brcc	.+6      	; 0x134 <__vector_13+0x5c>
 12e:	81 30       	cpi	r24, 0x01	; 1
 130:	41 f0       	breq	.+16     	; 0x142 <__vector_13+0x6a>
 132:	b5 c0       	rjmp	.+362    	; 0x29e <__vector_13+0x1c6>
 134:	83 30       	cpi	r24, 0x03	; 3
 136:	09 f4       	brne	.+2      	; 0x13a <__vector_13+0x62>
 138:	48 c0       	rjmp	.+144    	; 0x1ca <__vector_13+0xf2>
 13a:	84 30       	cpi	r24, 0x04	; 4
 13c:	09 f4       	brne	.+2      	; 0x140 <__vector_13+0x68>
 13e:	85 c0       	rjmp	.+266    	; 0x24a <__vector_13+0x172>
 140:	ae c0       	rjmp	.+348    	; 0x29e <__vector_13+0x1c6>
	{
		// Do nothing
		case STATE_IDLE:
		// Move to the next state
		state = STATE_HUMID;
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 148:	ad c0       	rjmp	.+346    	; 0x2a4 <__vector_13+0x1cc>
		
		// Get humidity
		case STATE_HUMID:
		// WRITE YOUR CODE HERE
		twi_start((addr<<1) + TWI_WRITE);
 14a:	8e ea       	ldi	r24, 0xAE	; 174
 14c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		twi_write(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 9a 01 	call	0x334	; 0x334 <twi_write>
		twi_start((addr<<1) + TWI_WRITE);
 156:	8e ea       	ldi	r24, 0xAE	; 174
 158:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		uint8_t humid_int = twi_read_nack();
 15c:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_nack>
 160:	08 2f       	mov	r16, r24
		twi_start((addr<<1) + TWI_WRITE);
 162:	8e ea       	ldi	r24, 0xAE	; 174
 164:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		twi_write(1);
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	0e 94 9a 01 	call	0x334	; 0x334 <twi_write>
		twi_start((addr<<1) + TWI_WRITE);
 16e:	8e ea       	ldi	r24, 0xAE	; 174
 170:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		uint8_t humid_frc = twi_read_nack();
 174:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_nack>
 178:	18 2f       	mov	r17, r24
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 17a:	4a e0       	ldi	r20, 0x0A	; 10
 17c:	be 01       	movw	r22, r28
 17e:	6f 5f       	subi	r22, 0xFF	; 255
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	80 2f       	mov	r24, r16
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	0e 94 45 02 	call	0x48a	; 0x48a <__itoa_ncheck>
 18a:	4a e0       	ldi	r20, 0x0A	; 10
 18c:	be 01       	movw	r22, r28
 18e:	6d 5f       	subi	r22, 0xFD	; 253
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	81 2f       	mov	r24, r17
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 45 02 	call	0x48a	; 0x48a <__itoa_ncheck>
		itoa(humid_int, humint_string, 10);
		itoa(humid_frc, humfrc_string, 10);
		uart_puts("Humidity: ");
 19a:	8f e1       	ldi	r24, 0x1F	; 31
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts(humint_string);
 1a2:	ce 01       	movw	r24, r28
 1a4:	01 96       	adiw	r24, 0x01	; 1
 1a6:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts(".");
 1aa:	8a e2       	ldi	r24, 0x2A	; 42
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts(humfrc_string);
 1b2:	ce 01       	movw	r24, r28
 1b4:	03 96       	adiw	r24, 0x03	; 3
 1b6:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts("\r\n");
 1ba:	8c e1       	ldi	r24, 0x1C	; 28
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		// Move to the next state
		state = STATE_TEMP;
 1c2:	83 e0       	ldi	r24, 0x03	; 3
 1c4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 1c8:	6d c0       	rjmp	.+218    	; 0x2a4 <__vector_13+0x1cc>

		// Get temperature
		case STATE_TEMP:
		// WRITE YOUR CODE HERE
		twi_start((addr<<1) + TWI_WRITE);
 1ca:	8e ea       	ldi	r24, 0xAE	; 174
 1cc:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		twi_write(2);
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	0e 94 9a 01 	call	0x334	; 0x334 <twi_write>
		twi_start((addr<<1) + TWI_WRITE);
 1d6:	8e ea       	ldi	r24, 0xAE	; 174
 1d8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		uint8_t temp_int = twi_read_nack();
 1dc:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_nack>
 1e0:	08 2f       	mov	r16, r24
		twi_start((addr<<1) + TWI_WRITE);
 1e2:	8e ea       	ldi	r24, 0xAE	; 174
 1e4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		twi_write(3);
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	0e 94 9a 01 	call	0x334	; 0x334 <twi_write>
		twi_start((addr<<1) + TWI_WRITE);
 1ee:	8e ea       	ldi	r24, 0xAE	; 174
 1f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		uint8_t temp_frc = twi_read_nack();
 1f4:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_nack>
 1f8:	18 2f       	mov	r17, r24
 1fa:	4a e0       	ldi	r20, 0x0A	; 10
 1fc:	be 01       	movw	r22, r28
 1fe:	6b 5f       	subi	r22, 0xFB	; 251
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	80 2f       	mov	r24, r16
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	0e 94 45 02 	call	0x48a	; 0x48a <__itoa_ncheck>
 20a:	4a e0       	ldi	r20, 0x0A	; 10
 20c:	be 01       	movw	r22, r28
 20e:	69 5f       	subi	r22, 0xF9	; 249
 210:	7f 4f       	sbci	r23, 0xFF	; 255
 212:	81 2f       	mov	r24, r17
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 45 02 	call	0x48a	; 0x48a <__itoa_ncheck>
		itoa(temp_int, tempint_string, 10);
		itoa(temp_frc, temfrc_string, 10);
		uart_puts("Temperature: ");
 21a:	8c e2       	ldi	r24, 0x2C	; 44
 21c:	91 e0       	ldi	r25, 0x01	; 1
 21e:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts(tempint_string);
 222:	ce 01       	movw	r24, r28
 224:	05 96       	adiw	r24, 0x05	; 5
 226:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts(".");
 22a:	8a e2       	ldi	r24, 0x2A	; 42
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts(temfrc_string);
 232:	ce 01       	movw	r24, r28
 234:	07 96       	adiw	r24, 0x07	; 7
 236:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts("\r\n");
 23a:	8c e1       	ldi	r24, 0x1C	; 28
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		// Move to the next state
		state = STATE_CHECK;
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 248:	2d c0       	rjmp	.+90     	; 0x2a4 <__vector_13+0x1cc>

		// Get checksum
		case STATE_CHECK:
		// WRITE YOUR CODE HERE
		twi_start((addr<<1) + TWI_WRITE);
 24a:	8e ea       	ldi	r24, 0xAE	; 174
 24c:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		twi_write(4);
 250:	84 e0       	ldi	r24, 0x04	; 4
 252:	0e 94 9a 01 	call	0x334	; 0x334 <twi_write>
		twi_start((addr<<1) + TWI_WRITE);
 256:	8e ea       	ldi	r24, 0xAE	; 174
 258:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <twi_start>
		uint8_t checksum = twi_read_nack();
 25c:	0e 94 a5 01 	call	0x34a	; 0x34a <twi_read_nack>
 260:	4a e0       	ldi	r20, 0x0A	; 10
 262:	be 01       	movw	r22, r28
 264:	67 5f       	subi	r22, 0xF7	; 247
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	0e 94 45 02 	call	0x48a	; 0x48a <__itoa_ncheck>
		itoa(checksum, checksum_string, 10);
		uart_puts("Checksum: ");
 26e:	8a e3       	ldi	r24, 0x3A	; 58
 270:	91 e0       	ldi	r25, 0x01	; 1
 272:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts(checksum_string);
 276:	ce 01       	movw	r24, r28
 278:	09 96       	adiw	r24, 0x09	; 9
 27a:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts("\r\n");
 27e:	8c e1       	ldi	r24, 0x1C	; 28
 280:	91 e0       	ldi	r25, 0x01	; 1
 282:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts("------------");
 286:	85 e4       	ldi	r24, 0x45	; 69
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		uart_puts("\r\n");
 28e:	8c e1       	ldi	r24, 0x1C	; 28
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	0e 94 36 02 	call	0x46c	; 0x46c <uart_puts>
		// Move to the next state
		state = STATE_IDLE;
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
 29c:	03 c0       	rjmp	.+6      	; 0x2a4 <__vector_13+0x1cc>

		default:
		state = STATE_IDLE;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		break;
	}
	 
 2a4:	2a 96       	adiw	r28, 0x0a	; 10
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	ff 91       	pop	r31
 2b6:	ef 91       	pop	r30
 2b8:	bf 91       	pop	r27
 2ba:	af 91       	pop	r26
 2bc:	9f 91       	pop	r25
 2be:	8f 91       	pop	r24
 2c0:	7f 91       	pop	r23
 2c2:	6f 91       	pop	r22
 2c4:	5f 91       	pop	r21
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	1f 91       	pop	r17
 2ce:	0f 91       	pop	r16
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWEA);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 2da:	87 b1       	in	r24, 0x07	; 7
 2dc:	8f 7c       	andi	r24, 0xCF	; 207
 2de:	87 b9       	out	0x07, r24	; 7
 2e0:	88 b1       	in	r24, 0x08	; 8
 2e2:	80 63       	ori	r24, 0x30	; 48
 2e4:	88 b9       	out	0x08, r24	; 8
 2e6:	e9 eb       	ldi	r30, 0xB9	; 185
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	8c 7f       	andi	r24, 0xFC	; 252
 2ee:	80 83       	st	Z, r24
 2f0:	88 e9       	ldi	r24, 0x98	; 152
 2f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
 2f6:	08 95       	ret

000002f8 <twi_start>:
 2f8:	94 ea       	ldi	r25, 0xA4	; 164
 2fa:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 2fe:	ec eb       	ldi	r30, 0xBC	; 188
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	90 81       	ld	r25, Z
 304:	99 23       	and	r25, r25
 306:	ec f7       	brge	.-6      	; 0x302 <twi_start+0xa>
 308:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 30c:	84 e8       	ldi	r24, 0x84	; 132
 30e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 312:	ec eb       	ldi	r30, 0xBC	; 188
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	80 81       	ld	r24, Z
 318:	88 23       	and	r24, r24
 31a:	ec f7       	brge	.-6      	; 0x316 <twi_start+0x1e>
 31c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
 320:	98 7f       	andi	r25, 0xF8	; 248
 322:	98 31       	cpi	r25, 0x18	; 24
 324:	29 f0       	breq	.+10     	; 0x330 <twi_start+0x38>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 34       	cpi	r25, 0x40	; 64
 32a:	19 f4       	brne	.+6      	; 0x332 <twi_start+0x3a>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	08 95       	ret
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	08 95       	ret

00000334 <twi_write>:
 334:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 338:	84 e8       	ldi	r24, 0x84	; 132
 33a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 33e:	ec eb       	ldi	r30, 0xBC	; 188
 340:	f0 e0       	ldi	r31, 0x00	; 0
 342:	80 81       	ld	r24, Z
 344:	88 23       	and	r24, r24
 346:	ec f7       	brge	.-6      	; 0x342 <twi_write+0xe>
 348:	08 95       	ret

0000034a <twi_read_nack>:
 * Purpose:  Read one byte from TWI slave device and acknowledge it by NACK.
 * Returns:  Received data byte
 **********************************************************************/
uint8_t twi_read_nack(void)
{
    TWCR = _BV(TWINT) | _BV(TWEN);
 34a:	84 e8       	ldi	r24, 0x84	; 132
 34c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

    while ((TWCR & _BV(TWINT)) == 0);
 350:	ec eb       	ldi	r30, 0xBC	; 188
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	88 23       	and	r24, r24
 358:	ec f7       	brge	.-6      	; 0x354 <twi_read_nack+0xa>
    return (TWDR);
 35a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}
 35e:	08 95       	ret

00000360 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 360:	1f 92       	push	r1
 362:	0f 92       	push	r0
 364:	0f b6       	in	r0, 0x3f	; 63
 366:	0f 92       	push	r0
 368:	11 24       	eor	r1, r1
 36a:	2f 93       	push	r18
 36c:	8f 93       	push	r24
 36e:	9f 93       	push	r25
 370:	ef 93       	push	r30
 372:	ff 93       	push	r31
 374:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 378:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 37c:	8c 71       	andi	r24, 0x1C	; 28
 37e:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <UART_RxHead>
 382:	ef 5f       	subi	r30, 0xFF	; 255
 384:	ef 71       	andi	r30, 0x1F	; 31
 386:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <UART_RxTail>
 38a:	e9 17       	cp	r30, r25
 38c:	39 f0       	breq	.+14     	; 0x39c <__vector_18+0x3c>
 38e:	e0 93 54 01 	sts	0x0154, r30	; 0x800154 <UART_RxHead>
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	e9 5a       	subi	r30, 0xA9	; 169
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	20 83       	st	Z, r18
 39a:	01 c0       	rjmp	.+2      	; 0x39e <__vector_18+0x3e>
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <__data_end>
 3a2:	89 2b       	or	r24, r25
 3a4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end>
 3a8:	ff 91       	pop	r31
 3aa:	ef 91       	pop	r30
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <__vector_19>:
 3bc:	1f 92       	push	r1
 3be:	0f 92       	push	r0
 3c0:	0f b6       	in	r0, 0x3f	; 63
 3c2:	0f 92       	push	r0
 3c4:	11 24       	eor	r1, r1
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	ef 93       	push	r30
 3cc:	ff 93       	push	r31
 3ce:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <UART_TxHead>
 3d2:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <UART_TxTail>
 3d6:	98 17       	cp	r25, r24
 3d8:	69 f0       	breq	.+26     	; 0x3f4 <__vector_19+0x38>
 3da:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <UART_TxTail>
 3de:	ef 5f       	subi	r30, 0xFF	; 255
 3e0:	ef 71       	andi	r30, 0x1F	; 31
 3e2:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <UART_TxTail>
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	e9 58       	subi	r30, 0x89	; 137
 3ea:	fe 4f       	sbci	r31, 0xFE	; 254
 3ec:	80 81       	ld	r24, Z
 3ee:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 3f2:	05 c0       	rjmp	.+10     	; 0x3fe <__vector_19+0x42>
 3f4:	e1 ec       	ldi	r30, 0xC1	; 193
 3f6:	f0 e0       	ldi	r31, 0x00	; 0
 3f8:	80 81       	ld	r24, Z
 3fa:	8f 7d       	andi	r24, 0xDF	; 223
 3fc:	80 83       	st	Z, r24
 3fe:	ff 91       	pop	r31
 400:	ef 91       	pop	r30
 402:	9f 91       	pop	r25
 404:	8f 91       	pop	r24
 406:	0f 90       	pop	r0
 408:	0f be       	out	0x3f, r0	; 63
 40a:	0f 90       	pop	r0
 40c:	1f 90       	pop	r1
 40e:	18 95       	reti

00000410 <uart_init>:
 410:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <UART_TxHead>
 414:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <UART_TxTail>
 418:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <UART_RxHead>
 41c:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <UART_RxTail>
 420:	99 23       	and	r25, r25
 422:	1c f4       	brge	.+6      	; 0x42a <uart_init+0x1a>
 424:	22 e0       	ldi	r18, 0x02	; 2
 426:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 42a:	90 78       	andi	r25, 0x80	; 128
 42c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 430:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 434:	88 e9       	ldi	r24, 0x98	; 152
 436:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 43a:	86 e0       	ldi	r24, 0x06	; 6
 43c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 440:	08 95       	ret

00000442 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 442:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <UART_TxHead>
 446:	2f 5f       	subi	r18, 0xFF	; 255
 448:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 44a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <UART_TxTail>
 44e:	29 17       	cp	r18, r25
 450:	e1 f3       	breq	.-8      	; 0x44a <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 452:	e2 2f       	mov	r30, r18
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	e9 58       	subi	r30, 0x89	; 137
 458:	fe 4f       	sbci	r31, 0xFE	; 254
 45a:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 45c:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 460:	e1 ec       	ldi	r30, 0xC1	; 193
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	80 62       	ori	r24, 0x20	; 32
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret

0000046c <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	ec 01       	movw	r28, r24
    while (*s)
 472:	88 81       	ld	r24, Y
 474:	88 23       	and	r24, r24
 476:	31 f0       	breq	.+12     	; 0x484 <uart_puts+0x18>
 478:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
 47a:	0e 94 21 02 	call	0x442	; 0x442 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 47e:	89 91       	ld	r24, Y+
 480:	81 11       	cpse	r24, r1
 482:	fb cf       	rjmp	.-10     	; 0x47a <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <__itoa_ncheck>:
 48a:	bb 27       	eor	r27, r27
 48c:	4a 30       	cpi	r20, 0x0A	; 10
 48e:	31 f4       	brne	.+12     	; 0x49c <__itoa_ncheck+0x12>
 490:	99 23       	and	r25, r25
 492:	22 f4       	brpl	.+8      	; 0x49c <__itoa_ncheck+0x12>
 494:	bd e2       	ldi	r27, 0x2D	; 45
 496:	90 95       	com	r25
 498:	81 95       	neg	r24
 49a:	9f 4f       	sbci	r25, 0xFF	; 255
 49c:	0c 94 51 02 	jmp	0x4a2	; 0x4a2 <__utoa_common>

000004a0 <__utoa_ncheck>:
 4a0:	bb 27       	eor	r27, r27

000004a2 <__utoa_common>:
 4a2:	fb 01       	movw	r30, r22
 4a4:	55 27       	eor	r21, r21
 4a6:	aa 27       	eor	r26, r26
 4a8:	88 0f       	add	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	aa 1f       	adc	r26, r26
 4ae:	a4 17       	cp	r26, r20
 4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__utoa_common+0x14>
 4b2:	a4 1b       	sub	r26, r20
 4b4:	83 95       	inc	r24
 4b6:	50 51       	subi	r21, 0x10	; 16
 4b8:	b9 f7       	brne	.-18     	; 0x4a8 <__utoa_common+0x6>
 4ba:	a0 5d       	subi	r26, 0xD0	; 208
 4bc:	aa 33       	cpi	r26, 0x3A	; 58
 4be:	08 f0       	brcs	.+2      	; 0x4c2 <__utoa_common+0x20>
 4c0:	a9 5d       	subi	r26, 0xD9	; 217
 4c2:	a1 93       	st	Z+, r26
 4c4:	00 97       	sbiw	r24, 0x00	; 0
 4c6:	79 f7       	brne	.-34     	; 0x4a6 <__utoa_common+0x4>
 4c8:	b1 11       	cpse	r27, r1
 4ca:	b1 93       	st	Z+, r27
 4cc:	11 92       	st	Z+, r1
 4ce:	cb 01       	movw	r24, r22
 4d0:	0c 94 6a 02 	jmp	0x4d4	; 0x4d4 <strrev>

000004d4 <strrev>:
 4d4:	dc 01       	movw	r26, r24
 4d6:	fc 01       	movw	r30, r24
 4d8:	67 2f       	mov	r22, r23
 4da:	71 91       	ld	r23, Z+
 4dc:	77 23       	and	r23, r23
 4de:	e1 f7       	brne	.-8      	; 0x4d8 <strrev+0x4>
 4e0:	32 97       	sbiw	r30, 0x02	; 2
 4e2:	04 c0       	rjmp	.+8      	; 0x4ec <strrev+0x18>
 4e4:	7c 91       	ld	r23, X
 4e6:	6d 93       	st	X+, r22
 4e8:	70 83       	st	Z, r23
 4ea:	62 91       	ld	r22, -Z
 4ec:	ae 17       	cp	r26, r30
 4ee:	bf 07       	cpc	r27, r31
 4f0:	c8 f3       	brcs	.-14     	; 0x4e4 <strrev+0x10>
 4f2:	08 95       	ret

000004f4 <_exit>:
 4f4:	f8 94       	cli

000004f6 <__stop_program>:
 4f6:	ff cf       	rjmp	.-2      	; 0x4f6 <__stop_program>
