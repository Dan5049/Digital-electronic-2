
05-segment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000326  000003ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000326  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  0080010e  0080010e  000003c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e18  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000863  00000000  00000000  000012f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a6  00000000  00000000  00001b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  00002104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cd  00000000  00000000  000022a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000497  00000000  00000000  0000276d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00002c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e2       	ldi	r30, 0x26	; 38
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 00 	call	0xf0	; 0xf0 <main>
  9e:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 **********************************************************************/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    reg_name++;                     // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_low>:
 * Input:    reg_name - Address of Port Register, such as &PORTB
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
  be:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
  c0:	90 81       	ld	r25, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_low+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_low+0xa>
  d0:	20 95       	com	r18
  d2:	29 23       	and	r18, r25
  d4:	20 83       	st	Z, r18
  d6:	08 95       	ret

000000d8 <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name | (1<<pin_num);
  d8:	fc 01       	movw	r30, r24
  da:	40 81       	ld	r20, Z
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <GPIO_write_high+0xe>
  e2:	22 0f       	add	r18, r18
  e4:	33 1f       	adc	r19, r19
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <GPIO_write_high+0xa>
  ea:	24 2b       	or	r18, r20
  ec:	20 83       	st	Z, r18
  ee:	08 95       	ret

000000f0 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configure SSD signals
    SEG_init();
  f0:	0e 94 0e 01 	call	0x21c	; 0x21c <SEG_init>

    // Test of SSD: display number '3' at position 0 
    // display '0' at position 2
    SEG_update_shift_regs(0, 0);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	0e 94 1e 01 	call	0x23c	; 0x23c <SEG_update_shift_regs>
    SEG_update_shift_regs(0, 1);
  fc:	61 e0       	ldi	r22, 0x01	; 1
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	0e 94 1e 01 	call	0x23c	; 0x23c <SEG_update_shift_regs>

    // Configure 16-bit Timer/Counter1 for Decimal counter
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 104:	e1 e8       	ldi	r30, 0x81	; 129
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8b 7f       	andi	r24, 0xFB	; 251
 10c:	80 83       	st	Z, r24
 10e:	80 81       	ld	r24, Z
 110:	83 60       	ori	r24, 0x03	; 3
 112:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 114:	ef e6       	ldi	r30, 0x6F	; 111
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	80 83       	st	Z, r24
    
    //config 8-bit timer for switching between displays
    TIM0_overflow_4ms();
 11e:	85 b5       	in	r24, 0x25	; 37
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	85 bd       	out	0x25, r24	; 37
 124:	85 b5       	in	r24, 0x25	; 37
 126:	84 60       	ori	r24, 0x04	; 4
 128:	85 bd       	out	0x25, r24	; 37
    TIM0_overflow_interrupt_enable();
 12a:	ee e6       	ldi	r30, 0x6E	; 110
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	81 60       	ori	r24, 0x01	; 1
 132:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 134:	78 94       	sei
 136:	ff cf       	rjmp	.-2      	; 0x136 <main+0x46>

00000138 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Increment decimal counter value and display it on SSD.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
    // WRITE YOUR CODE HERE
    cnt0++;
 15a:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 15e:	8f 5f       	subi	r24, 0xFF	; 255
 160:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <cnt0>
    if (cnt0 > 9) {
 164:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 168:	8a 30       	cpi	r24, 0x0A	; 10
 16a:	68 f0       	brcs	.+26     	; 0x186 <__vector_13+0x4e>
        cnt0 = 0;
 16c:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <cnt0>
        cnt1++;
 170:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <cnt1>
        if(cnt1 > 5)
 17a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 17e:	86 30       	cpi	r24, 0x06	; 6
 180:	10 f0       	brcs	.+4      	; 0x186 <__vector_13+0x4e>
            cnt1 = 0;
 182:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <cnt1>
    }    
    
    SEG_update_shift_regs(cnt0, 0);
 186:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	0e 94 1e 01 	call	0x23c	; 0x23c <SEG_update_shift_regs>
}
 190:	ff 91       	pop	r31
 192:	ef 91       	pop	r30
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	7f 91       	pop	r23
 19e:	6f 91       	pop	r22
 1a0:	5f 91       	pop	r21
 1a2:	4f 91       	pop	r20
 1a4:	3f 91       	pop	r19
 1a6:	2f 91       	pop	r18
 1a8:	0f 90       	pop	r0
 1aa:	0f be       	out	0x3f, r0	; 63
 1ac:	0f 90       	pop	r0
 1ae:	1f 90       	pop	r1
 1b0:	18 95       	reti

000001b2 <__vector_16>:

ISR(TIMER0_OVF_vect) {
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	2f 93       	push	r18
 1be:	3f 93       	push	r19
 1c0:	4f 93       	push	r20
 1c2:	5f 93       	push	r21
 1c4:	6f 93       	push	r22
 1c6:	7f 93       	push	r23
 1c8:	8f 93       	push	r24
 1ca:	9f 93       	push	r25
 1cc:	af 93       	push	r26
 1ce:	bf 93       	push	r27
 1d0:	ef 93       	push	r30
 1d2:	ff 93       	push	r31
    static uint8_t pos = 0;
    pos++;
 1d4:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <__data_end>
 1d8:	6f 5f       	subi	r22, 0xFF	; 255
 1da:	60 93 0e 01 	sts	0x010E, r22	; 0x80010e <__data_end>
    if(pos > 1) {
 1de:	62 30       	cpi	r22, 0x02	; 2
 1e0:	40 f0       	brcs	.+16     	; 0x1f2 <__vector_16+0x40>
        pos = 0;
 1e2:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
        SEG_update_shift_regs(cnt0, pos);
 1e6:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <cnt0>
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	0e 94 1e 01 	call	0x23c	; 0x23c <SEG_update_shift_regs>
 1f0:	04 c0       	rjmp	.+8      	; 0x1fa <__vector_16+0x48>
    }
    else
    SEG_update_shift_regs(cnt1, pos);
 1f2:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <cnt1>
 1f6:	0e 94 1e 01 	call	0x23c	; 0x23c <SEG_update_shift_regs>
 1fa:	ff 91       	pop	r31
 1fc:	ef 91       	pop	r30
 1fe:	bf 91       	pop	r27
 200:	af 91       	pop	r26
 202:	9f 91       	pop	r25
 204:	8f 91       	pop	r24
 206:	7f 91       	pop	r23
 208:	6f 91       	pop	r22
 20a:	5f 91       	pop	r21
 20c:	4f 91       	pop	r20
 20e:	3f 91       	pop	r19
 210:	2f 91       	pop	r18
 212:	0f 90       	pop	r0
 214:	0f be       	out	0x3f, r0	; 63
 216:	0f 90       	pop	r0
 218:	1f 90       	pop	r1
 21a:	18 95       	reti

0000021c <SEG_init>:
 * Returns:  none
 **********************************************************************/
void SEG_init(void)
{
    /* Configuration of SSD signals */
    GPIO_config_output(&DDRD, SEG_LATCH);
 21c:	64 e0       	ldi	r22, 0x04	; 4
 21e:	8a e2       	ldi	r24, 0x2A	; 42
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRD, SEG_CLK);
 226:	67 e0       	ldi	r22, 0x07	; 7
 228:	8a e2       	ldi	r24, 0x2A	; 42
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_config_output(&DDRB, SEG_DATA);
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	84 e2       	ldi	r24, 0x24	; 36
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
 23a:	08 95       	ret

0000023c <SEG_update_shift_regs>:
 *           position - Position of the display where the segments are to 
 *                      be displayed (p3 p2 p1 p0 xxxx, active high)
 * Returns:  none
 **********************************************************************/
void SEG_update_shift_regs(uint8_t segments, uint8_t position)
{
 23c:	1f 93       	push	r17
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
   uint8_t bit_number;
   segments = segment_value[segments];     // 0, 1, ..., 9
 242:	e8 2f       	mov	r30, r24
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ec 5f       	subi	r30, 0xFC	; 252
 248:	fe 4f       	sbci	r31, 0xFE	; 254
 24a:	10 81       	ld	r17, Z
   position = segment_position[position];  // 0, 1, 2,
 24c:	e6 2f       	mov	r30, r22
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	e0 50       	subi	r30, 0x00	; 0
 252:	ff 4f       	sbci	r31, 0xFF	; 255
 254:	d0 81       	ld	r29, Z

    // Pull LATCH, CLK, and DATA low
    GPIO_write_low(&PORTD, SEG_LATCH);
 256:	64 e0       	ldi	r22, 0x04	; 4
 258:	8b e2       	ldi	r24, 0x2B	; 43
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTD, SEG_CLK);
 260:	67 e0       	ldi	r22, 0x07	; 7
 262:	8b e2       	ldi	r24, 0x2B	; 43
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
    GPIO_write_low(&PORTB, SEG_DATA);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	85 e2       	ldi	r24, 0x25	; 37
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 274:	85 e0       	ldi	r24, 0x05	; 5
 276:	8a 95       	dec	r24
 278:	f1 f7       	brne	.-4      	; 0x276 <SEG_update_shift_regs+0x3a>
 27a:	00 00       	nop
 27c:	c8 e0       	ldi	r28, 0x08	; 8
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "segments" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((segments & 0b00000001) == 0)
 27e:	10 fd       	sbrc	r17, 0
 280:	06 c0       	rjmp	.+12     	; 0x28e <SEG_update_shift_regs+0x52>
            GPIO_write_low(&PORTB, SEG_DATA);
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	85 e2       	ldi	r24, 0x25	; 37
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 28c:	05 c0       	rjmp	.+10     	; 0x298 <SEG_update_shift_regs+0x5c>
        else
            GPIO_write_high(&PORTB, SEG_DATA);
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	85 e2       	ldi	r24, 0x25	; 37
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 298:	85 e0       	ldi	r24, 0x05	; 5
 29a:	8a 95       	dec	r24
 29c:	f1 f7       	brne	.-4      	; 0x29a <SEG_update_shift_regs+0x5e>
 29e:	00 00       	nop
            
        // Wait 1 us
        _delay_us(1); 
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);       
 2a0:	67 e0       	ldi	r22, 0x07	; 7
 2a2:	8b e2       	ldi	r24, 0x2B	; 43
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2aa:	85 e0       	ldi	r24, 0x05	; 5
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <SEG_update_shift_regs+0x70>
 2b0:	00 00       	nop
        // Wait 1 us
        _delay_us(1);        
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2b2:	67 e0       	ldi	r22, 0x07	; 7
 2b4:	8b e2       	ldi	r24, 0x2B	; 43
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        
        // Shift "segments"
        segments = segments >> 1;
 2bc:	16 95       	lsr	r17
 2be:	c1 50       	subi	r28, 0x01	; 1
    // Wait 1 us
    _delay_us(1);

    // Loop through the 1st byte (segments)
    // a b c d e f g DP (active low values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 2c0:	f1 f6       	brne	.-68     	; 0x27e <SEG_update_shift_regs+0x42>
 2c2:	c8 e0       	ldi	r28, 0x08	; 8
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
    {
        // Test LSB of "position" by & (faster) or % (slower) and... 
        // ...output DATA value
        if ((position & 0b00000001) == 0)
 2c4:	d0 fd       	sbrc	r29, 0
 2c6:	06 c0       	rjmp	.+12     	; 0x2d4 <SEG_update_shift_regs+0x98>
            GPIO_write_low(&PORTB, SEG_DATA);
 2c8:	60 e0       	ldi	r22, 0x00	; 0
 2ca:	85 e2       	ldi	r24, 0x25	; 37
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
 2d2:	05 c0       	rjmp	.+10     	; 0x2de <SEG_update_shift_regs+0xa2>
        else
            GPIO_write_high(&PORTB, SEG_DATA);
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	85 e2       	ldi	r24, 0x25	; 37
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2de:	85 e0       	ldi	r24, 0x05	; 5
 2e0:	8a 95       	dec	r24
 2e2:	f1 f7       	brne	.-4      	; 0x2e0 <SEG_update_shift_regs+0xa4>
 2e4:	00 00       	nop
        
        // Wait 1 us
        _delay_us(1);
        // Pull CLK high
        GPIO_write_high(&PORTD, SEG_CLK);
 2e6:	67 e0       	ldi	r22, 0x07	; 7
 2e8:	8b e2       	ldi	r24, 0x2B	; 43
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 2f0:	85 e0       	ldi	r24, 0x05	; 5
 2f2:	8a 95       	dec	r24
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <SEG_update_shift_regs+0xb6>
 2f6:	00 00       	nop
        // Wait 1 us
        _delay_us(1);
        // Pull CLK low
        GPIO_write_low(&PORTD, SEG_CLK);
 2f8:	67 e0       	ldi	r22, 0x07	; 7
 2fa:	8b e2       	ldi	r24, 0x2B	; 43
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_low>
        
        // Shift "position"
        position = position >> 1;
 302:	d6 95       	lsr	r29
 304:	c1 50       	subi	r28, 0x01	; 1
        segments = segments >> 1;
    }

    // Loop through the 2nd byte (position)
    // p3 p2 p1 p0 . . . . (active high values)
    for (bit_number = 0; bit_number < 8; bit_number++)
 306:	f1 f6       	brne	.-68     	; 0x2c4 <SEG_update_shift_regs+0x88>
        // Shift "position"
        position = position >> 1;
    }

    // Pull LATCH high
    GPIO_write_high(&PORTD, SEG_LATCH);
 308:	64 e0       	ldi	r22, 0x04	; 4
 30a:	8b e2       	ldi	r24, 0x2B	; 43
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	0e 94 6c 00 	call	0xd8	; 0xd8 <GPIO_write_high>
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	8a 95       	dec	r24
 316:	f1 f7       	brne	.-4      	; 0x314 <SEG_update_shift_regs+0xd8>
 318:	00 00       	nop
    // Wait 1 us
    _delay_us(1);
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	1f 91       	pop	r17
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
